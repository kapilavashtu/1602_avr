
1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fcb  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  000014c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000702  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b2  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f5  00000000  00000000  00002d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000032fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ce c0       	rjmp	.+412    	; 0x1de <__vector_16>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	1b d1       	rcall	.+566    	; 0x2bc <main>
  86:	4c c1       	rjmp	.+664    	; 0x320 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <_Z11pulseEnablev>:
	}
}

void printChar(uint8_t character)
{
	writeData(character);
  8a:	2b 98       	cbi	0x05, 3	; 5
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <_Z11pulseEnablev+0x4>
  92:	00 00       	nop
  94:	2b 9a       	sbi	0x05, 3	; 5
  96:	95 e0       	ldi	r25, 0x05	; 5
  98:	9a 95       	dec	r25
  9a:	f1 f7       	brne	.-4      	; 0x98 <_Z11pulseEnablev+0xe>
  9c:	00 00       	nop
  9e:	2b 98       	cbi	0x05, 3	; 5
  a0:	8f e8       	ldi	r24, 0x8F	; 143
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <_Z11pulseEnablev+0x1a>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <_Z11pulseEnablev+0x20>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <_Z9writeDatah>:
  ae:	2c 9a       	sbi	0x05, 4	; 5
  b0:	2b 98       	cbi	0x05, 3	; 5
  b2:	2a 98       	cbi	0x05, 2	; 5
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	e9 cf       	rjmp	.-46     	; 0x8a <_Z11pulseEnablev>
  b8:	08 95       	ret

000000ba <_Z10commandSeth>:
  ba:	2c 98       	cbi	0x05, 4	; 5
  bc:	2b 98       	cbi	0x05, 3	; 5
  be:	2a 98       	cbi	0x05, 2	; 5
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	e3 cf       	rjmp	.-58     	; 0x8a <_Z11pulseEnablev>
  c4:	08 95       	ret

000000c6 <_Z7blinkOnv>:
  c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <display_control>
  ca:	98 2f       	mov	r25, r24
  cc:	91 60       	ori	r25, 0x01	; 1
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <display_control>
  d2:	89 60       	ori	r24, 0x09	; 9
  d4:	f2 cf       	rjmp	.-28     	; 0xba <_Z10commandSeth>
  d6:	08 95       	ret

000000d8 <_Z11screenClearv>:
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	ef df       	rcall	.-34     	; 0xba <_Z10commandSeth>
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9f e1       	ldi	r25, 0x1F	; 31
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z11screenClearv+0x8>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_Z11screenClearv+0xe>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <_Z13displaySwitchv>:
  ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <display_control>
  ee:	98 2f       	mov	r25, r24
  f0:	94 60       	ori	r25, 0x04	; 4
  f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <display_control>
  f6:	8c 60       	ori	r24, 0x0C	; 12
  f8:	e0 cf       	rjmp	.-64     	; 0xba <_Z10commandSeth>
  fa:	08 95       	ret

000000fc <_Z8beginLCDhhh>:
  fc:	62 30       	cpi	r22, 0x02	; 2
  fe:	28 f0       	brcs	.+10     	; 0x10a <_Z8beginLCDhhh+0xe>
 100:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <display_function>
 104:	88 60       	ori	r24, 0x08	; 8
 106:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <display_function>
 10a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <numlines>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	80 e7       	ldi	r24, 0x70	; 112
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <_Z8beginLCDhhh+0x18>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_Z8beginLCDhhh+0x22>
 11e:	00 00       	nop
 120:	2c 98       	cbi	0x05, 4	; 5
 122:	2b 98       	cbi	0x05, 3	; 5
 124:	2a 98       	cbi	0x05, 2	; 5
 126:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <display_function>
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	c6 df       	rcall	.-116    	; 0xba <_Z10commandSeth>
 12e:	8f e4       	ldi	r24, 0x4F	; 79
 130:	96 e4       	ldi	r25, 0x46	; 70
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <_Z8beginLCDhhh+0x36>
 136:	00 c0       	rjmp	.+0      	; 0x138 <_Z8beginLCDhhh+0x3c>
 138:	00 00       	nop
 13a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <display_function>
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	bc df       	rcall	.-136    	; 0xba <_Z10commandSeth>
 142:	87 e5       	ldi	r24, 0x57	; 87
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <_Z8beginLCDhhh+0x4a>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <_Z8beginLCDhhh+0x50>
 14c:	00 00       	nop
 14e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <display_function>
 152:	80 62       	ori	r24, 0x20	; 32
 154:	b2 df       	rcall	.-156    	; 0xba <_Z10commandSeth>
 156:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <display_function>
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	ae df       	rcall	.-164    	; 0xba <_Z10commandSeth>
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <display_control>
 164:	c2 df       	rcall	.-124    	; 0xea <_Z13displaySwitchv>
 166:	b8 df       	rcall	.-144    	; 0xd8 <_Z11screenClearv>
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	a4 cf       	rjmp	.-184    	; 0xba <_Z10commandSeth>
 172:	08 95       	ret

00000174 <_Z7initLCDh>:
 174:	88 23       	and	r24, r24
 176:	21 f0       	breq	.+8      	; 0x180 <_Z7initLCDh+0xc>
 178:	80 e1       	ldi	r24, 0x10	; 16
 17a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <display_function>
 17e:	02 c0       	rjmp	.+4      	; 0x184 <_Z7initLCDh+0x10>
 180:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <display_function>
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	80 e1       	ldi	r24, 0x10	; 16
 18a:	b8 cf       	rjmp	.-144    	; 0xfc <_Z8beginLCDhhh>
 18c:	08 95       	ret

0000018e <_Z9setCursorhh>:
 18e:	66 23       	and	r22, r22
 190:	19 f0       	breq	.+6      	; 0x198 <_Z9setCursorhh+0xa>
 192:	61 30       	cpi	r22, 0x01	; 1
 194:	21 f0       	breq	.+8      	; 0x19e <_Z9setCursorhh+0x10>
 196:	08 95       	ret
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	8f cf       	rjmp	.-226    	; 0xba <_Z10commandSeth>
 19c:	08 95       	ret
 19e:	80 6c       	ori	r24, 0xC0	; 192
 1a0:	8c cf       	rjmp	.-232    	; 0xba <_Z10commandSeth>
 1a2:	08 95       	ret

000001a4 <_Z8printInti>:
}

void printInt(int16_t val)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
	if (val < 0)
 1aa:	99 23       	and	r25, r25
 1ac:	2c f4       	brge	.+10     	; 0x1b8 <_Z8printInti+0x14>
	{
		writeData('-');
 1ae:	8d e2       	ldi	r24, 0x2D	; 45
 1b0:	7e df       	rcall	.-260    	; 0xae <_Z9writeDatah>
		val = -val;
 1b2:	d1 95       	neg	r29
 1b4:	c1 95       	neg	r28
 1b6:	d1 09       	sbc	r29, r1
	}
	if (val / 10)
 1b8:	ce 01       	movw	r24, r28
 1ba:	09 96       	adiw	r24, 0x09	; 9
 1bc:	43 97       	sbiw	r24, 0x13	; 19
 1be:	30 f0       	brcs	.+12     	; 0x1cc <_Z8printInti+0x28>
	{
		writeData(uint8_t (val / 10));
 1c0:	ce 01       	movw	r24, r28
 1c2:	6a e0       	ldi	r22, 0x0A	; 10
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	85 d0       	rcall	.+266    	; 0x2d2 <__divmodhi4>
 1c8:	86 2f       	mov	r24, r22
 1ca:	71 df       	rcall	.-286    	; 0xae <_Z9writeDatah>
	}
	writeData(uint8_t (val % 10 + '0'));
 1cc:	ce 01       	movw	r24, r28
 1ce:	6a e0       	ldi	r22, 0x0A	; 10
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	7f d0       	rcall	.+254    	; 0x2d2 <__divmodhi4>
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	6b df       	rcall	.-298    	; 0xae <_Z9writeDatah>
	//_delay_us(500);
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <__vector_16>:
 volatile uint32_t timer_counter = 0;
 

  //INTERRUPTS HANDLERS
 ISR(TIMER0_OVF_vect)
 {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
	  if(timer_counter > 0) timer_counter--;
 1f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timer_counter>
 1f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timer_counter+0x1>
 1f8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timer_counter+0x2>
 1fc:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timer_counter+0x3>
 200:	89 2b       	or	r24, r25
 202:	8a 2b       	or	r24, r26
 204:	8b 2b       	or	r24, r27
 206:	99 f0       	breq	.+38     	; 0x22e <__vector_16+0x50>
 208:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timer_counter>
 20c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timer_counter+0x1>
 210:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timer_counter+0x2>
 214:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timer_counter+0x3>
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	a1 09       	sbc	r26, r1
 21c:	b1 09       	sbc	r27, r1
 21e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timer_counter>
 222:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timer_counter+0x1>
 226:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <timer_counter+0x2>
 22a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <timer_counter+0x3>
	  
	  //*(uint8_t*)(0x25) ^= ((uint8_t) 1 << 5);
	  //sei();
 }
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <_Z11systickInitv>:
}


void systickInit(void)
{
	TCCR0B = PRESCALER;
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	95 bd       	out	0x25, r25	; 37
	TIFR0 = 0x00;
 244:	15 ba       	out	0x15, r1	; 21
	TIMSK0 |= (1 << TOIE0);
 246:	ee e6       	ldi	r30, 0x6E	; 110
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24
	GTCCR = 0x01;
 250:	93 bd       	out	0x23, r25	; 35
 252:	08 95       	ret

00000254 <_Z5delaym>:
	
}

void delay(uint32_t count_val)
{
	timer_counter = count_val;
 254:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <timer_counter>
 258:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <timer_counter+0x1>
 25c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timer_counter+0x2>
 260:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timer_counter+0x3>
	while(timer_counter != 0)
 264:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timer_counter>
 268:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timer_counter+0x1>
 26c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timer_counter+0x2>
 270:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timer_counter+0x3>
 274:	89 2b       	or	r24, r25
 276:	8a 2b       	or	r24, r26
 278:	8b 2b       	or	r24, r27
 27a:	a1 f7       	brne	.-24     	; 0x264 <_Z5delaym+0x10>
	{
	//*(volatile uint8_t*)(0x25) ^= ((uint8_t) 1 << 5);
	}
		
}
 27c:	08 95       	ret

0000027e <_Z5setupv>:

void setup(void)
{
 27e:	cf 93       	push	r28
	DDRB = 0xFF;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 284:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0;
 286:	1b b8       	out	0x0b, r1	; 11
	printInt(16323);
 288:	83 ec       	ldi	r24, 0xC3	; 195
 28a:	9f e3       	ldi	r25, 0x3F	; 63
 28c:	8b df       	rcall	.-234    	; 0x1a4 <_Z8printInti>
	systickInit();
 28e:	d8 df       	rcall	.-80     	; 0x240 <_Z11systickInitv>
	initLCD(1);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	70 df       	rcall	.-288    	; 0x174 <_Z7initLCDh>
 294:	78 94       	sei
	sei();
 296:	40 e0       	ldi	r20, 0x00	; 0
	beginLCD(16, 2, FONT_5_7_STYLE);
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	2f df       	rcall	.-418    	; 0xfc <_Z8beginLCDhhh>
	blinkOn();
 29e:	13 df       	rcall	.-474    	; 0xc6 <_Z7blinkOnv>
 2a0:	c8 e0       	ldi	r28, 0x08	; 8
 2a2:	87 e6       	ldi	r24, 0x67	; 103
	for(uint8_t i = 0; i < 8; i++)
	{
		writeData('g');
 2a4:	04 df       	rcall	.-504    	; 0xae <_Z9writeDatah>
 2a6:	c1 50       	subi	r28, 0x01	; 1
	systickInit();
	initLCD(1);
	sei();
	beginLCD(16, 2, FONT_5_7_STYLE);
	blinkOn();
	for(uint8_t i = 0; i < 8; i++)
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <_Z5setupv+0x24>
	{
		writeData('g');
		//_delay_ms(200);
	}
	setCursor(8,1);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	6f df       	rcall	.-290    	; 0x18e <_Z9setCursorhh>
	screenClear();
 2b0:	13 df       	rcall	.-474    	; 0xd8 <_Z11screenClearv>
 2b2:	83 ec       	ldi	r24, 0xC3	; 195
	printInt(16323);
 2b4:	9f e3       	ldi	r25, 0x3F	; 63
 2b6:	76 df       	rcall	.-276    	; 0x1a4 <_Z8printInti>
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <main>:
 2bc:	e0 df       	rcall	.-64     	; 0x27e <_Z5setupv>
 2be:	c0 e2       	ldi	r28, 0x20	; 32
{
	setup();
	     
    while (1) 
    {
		*(volatile uint8_t*)(0x25) ^= ((uint8_t) 1 << 5);
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	8c 27       	eor	r24, r28
 2c4:	85 b9       	out	0x05, r24	; 5
		//INVERT_BIT_8(PORTB,5);
		delay(20000);
 2c6:	60 e2       	ldi	r22, 0x20	; 32
 2c8:	7e e4       	ldi	r23, 0x4E	; 78
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	c2 df       	rcall	.-124    	; 0x254 <_Z5delaym>
 2d0:	f7 cf       	rjmp	.-18     	; 0x2c0 <main+0x4>

000002d2 <__divmodhi4>:
 2d2:	97 fb       	bst	r25, 7
 2d4:	07 2e       	mov	r0, r23
 2d6:	16 f4       	brtc	.+4      	; 0x2dc <__divmodhi4+0xa>
 2d8:	00 94       	com	r0
 2da:	06 d0       	rcall	.+12     	; 0x2e8 <__divmodhi4_neg1>
 2dc:	77 fd       	sbrc	r23, 7
 2de:	08 d0       	rcall	.+16     	; 0x2f0 <__divmodhi4_neg2>
 2e0:	0b d0       	rcall	.+22     	; 0x2f8 <__udivmodhi4>
 2e2:	07 fc       	sbrc	r0, 7
 2e4:	05 d0       	rcall	.+10     	; 0x2f0 <__divmodhi4_neg2>
 2e6:	3e f4       	brtc	.+14     	; 0x2f6 <__divmodhi4_exit>

000002e8 <__divmodhi4_neg1>:
 2e8:	90 95       	com	r25
 2ea:	81 95       	neg	r24
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	08 95       	ret

000002f0 <__divmodhi4_neg2>:
 2f0:	70 95       	com	r23
 2f2:	61 95       	neg	r22
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255

000002f6 <__divmodhi4_exit>:
 2f6:	08 95       	ret

000002f8 <__udivmodhi4>:
 2f8:	aa 1b       	sub	r26, r26
 2fa:	bb 1b       	sub	r27, r27
 2fc:	51 e1       	ldi	r21, 0x11	; 17
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <__udivmodhi4_ep>

00000300 <__udivmodhi4_loop>:
 300:	aa 1f       	adc	r26, r26
 302:	bb 1f       	adc	r27, r27
 304:	a6 17       	cp	r26, r22
 306:	b7 07       	cpc	r27, r23
 308:	10 f0       	brcs	.+4      	; 0x30e <__udivmodhi4_ep>
 30a:	a6 1b       	sub	r26, r22
 30c:	b7 0b       	sbc	r27, r23

0000030e <__udivmodhi4_ep>:
 30e:	88 1f       	adc	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	5a 95       	dec	r21
 314:	a9 f7       	brne	.-22     	; 0x300 <__udivmodhi4_loop>
 316:	80 95       	com	r24
 318:	90 95       	com	r25
 31a:	bc 01       	movw	r22, r24
 31c:	cd 01       	movw	r24, r26
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
